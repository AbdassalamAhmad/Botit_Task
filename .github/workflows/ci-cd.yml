name: test flask app then deploy to aws EC2.

on:
  # Auto
  push:
    branches: [ "main" ]
  
  # unnecessary becuase after merge you push to main so there will be dublicate.
  # pull_request: 
  #   branches: [ "main" ]
  #   types: [ "closed" ]

  # Manual
  workflow_dispatch: # Allow to run this workflow manually from the Actions tab
    inputs:
      trigger:
        description: "apply OR destroy" # apply to build infra, destroy to destroy it all.
        required: true
        default: apply # will choose the word apply for you when triggering the pipeline manually.
        type: choice
        options:
        - apply
        - destroy

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS User Credentials.
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS User Credentials.
  EC2_PUBLIC_SSH_KEY: ${{ secrets.EC2_PUBLIC_SSH_KEY }} # Used to upload public key to aws.
  EC2_PRIVATE_SSH_KEY: ${{ secrets.EC2_PRIVATE_SSH_KEY }} # Used to ssh into EC2.
  TRIGGER: 'apply' # Make it 'apply' to build AWS infra, and 'destroy' to destroy it all. "auto_workflow (on Push)", don't forget to comment the next line.
  #TRIGGER: '${{ inputs.trigger }}' # "manual workflow"



jobs:
  test-flask-build-push-image:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      if: env.TRIGGER == 'apply'
      uses: actions/checkout@v3

    - name: run docker-compose
      if: env.TRIGGER == 'apply'
      run: docker-compose up -d

    - name: make sure that docker-compose is running & Install dependencies
      if: env.TRIGGER == 'apply'
      run: |
        docker ps
        pip install -r requirements.txt

    - name: run python tests
      if: env.TRIGGER == 'apply'
      run: python ./tests/test_hello.py

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/flask_app:latest
  
  build-aws-infra-deploy:
    runs-on: ubuntu-latest
    needs: test-flask

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./terraform
    
    # Checks that all Terraform configuration files in the correct format.
    - name: Terraform Format
      run: |-
        terraform fmt -recursive
        terraform fmt -check
      working-directory: ./terraform

    - name: Terraform ${{ env.TRIGGER }}
      id: apply-or-destroy # id can only have static name not changing name (can't be variable like env.trigger).
      run: |-
        terraform $TRIGGER \
        -var="public_key=$EC2_PUBLIC_SSH_KEY" \
        -auto-approve
      working-directory: ./terraform

    - name: Copy private key && Flask App files
      if: env.TRIGGER == 'apply'
      run: |-
        echo "instance_ip=$(terraform output --raw instance_public_ip)" >> $GITHUB_ENV 
        sudo chmod 700 ./copy_app_files.sh
        ./copy_app_files.sh
      working-directory: ./terraform

    - name: Deploy Flask-App
      if: env.TRIGGER == 'apply'
      run: |-
        ssh -i ./keys/ssh_key_aws ec2-user@$instance_ip << EOF
            ls -l
            docker-compose up --build -d
        EOF